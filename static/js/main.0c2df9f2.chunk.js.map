{"version":3,"sources":["components/mrt-viewer/node.js","components/mrt-viewer/index.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["ThumbUpColor","chroma","luminance","desaturate","ThumbDownColor","ExchangeColor","CaretColor","AbstractColor","NodeCircle","className","cx","this","props","node","x","cy","y","r","radius","onMouseOver","onHover","onMouseLeave","stroke","color","strokeWidth","fill","expand","React","Component","NodeText","state","displayInteractionTool","id","randomstring","generate","action","source","onEdit","hover","setState","textColor","darken","baseY","textLines","iconSize","lineHeight","texts","pins","map","pin","_idx","isFocus","collapseHandler","textPieces","fullTextPieces","abstractHeight","abstractPieces","length","secondaryLineHeight","iconY","editButtonMarginTop","textWidth","fullTextWidth","generateEditIcon","T","dx","transform","style","transformOrigin","onClick","width","height","isUp","edits","rate","isDown","transformOriginX","scaleOrigin","key","textLeadingMargin","filter","fontSize","_text","idx","secondaryFontSize","editable","IconExchange","IconThumbsUpSolid","IconThumbsUp","IconThumbsDownSolid","IconThumbsDown","IconCaretUp","IconCaretDown","reverse","MRTViewer","EraMinRatio","lastEraRatio","labelTextFontSize","labelTextLineHeight","nodeRadius","nodeTextLeadingMargin","nodeTextWidth","nodeTextFontSize","nodeTextSecondaryFontSize","nodeTextLineHeight","nodeTextSecondaryLineHeight","nodeFullSpan","horizonMarginTop","horizonMarginBottom","averageFontWidthRatio","nodePaddingLeft","nodePaddingRight","nodePaddingTop","nodePaddingBottom","nodeEditButtonMarginTop","nodeOffsetX","nodeOffsetY","nodeWidth","nodeTextLines","reduce","prev","nodeHeight","lines","Math","max","nodeTextFold","text","span","textLength","floor","match","RegExp","line","nodeTextSecondaryFold","_data","data","extract","paper","year","venue","trim","title","citations","prefix","venue_year","exec","replace","abstract","root","branches","forEach","branch","push","sort","a","b","clusterNames","name","split","lodash","capitalize","join","userEdits","toExchange","focusNodeIndex","focusEraIndex","hideSubBranch","disableTextBranchSpan","disableTextClusterSpan","dataView","isSub","clusterID","branchID","eras","years","flatten","_to","_cnt","eraMinSize","lastEraMinSize","i","from","to","cnt","branchWithEra","era","numBranches","numClusters","rootColor","scale","clusterColors","cubehelix","start","rotations","gamma","lightness","correctLightness","colors","branchColors","_","views","defs","nodes","edges","addEdge","x1","y1","x2","y2","addVerticalEdge","addHorizontalEdge","generateGradientColor","colorID","gradientUnits","offset","stopColor","fullSpan","eraID","horizon","_height","erasHeight","eraHeight","nodeLeft","nodeRight","_branch","startEra","endEra","_nextBranch","sib","yStart","yEnd","param","_state","extendedBottomY","centerY","renderNodes","flattenDeep","_width","clusterLabelTextPieces","clusterLabelTexts","pieces","clusterLabelsHeight","extendedHeight","backgroundSolidColors","backgroundTextSolidColors","backgroundGradientSolidColors","backgroundSelectionColors","backgroundTextSelectionColors","backgroundGradientSelectionColors","viewBox","stdDeviation","in","opacity","_sibBranch","isCurrent","visibility","textDecoration","MRT","like","viewerScale","full","svgLib","saveSvgAsPng","document","getElementById","srcWidth","baseVal","outputWidth","body","clientWidth","out","min","type","theme","twoToneColor","hex","capture","zoom","App","sample_data","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sq6GAYMA,G,OAAeC,IAAO,SAASC,UAAU,IAAKC,WAAW,IACzDC,EAAiBH,IAAO,OAAOC,UAAU,IAAKC,WAAW,GACzDE,EAAgBJ,IAAO,QAAQC,UAAU,IAAKC,WAAW,GACzDG,EAAaL,IAAO,QAAQC,UAAU,IACtCK,EAAgBN,IAAO,QAAQC,UAAU,IAElCM,EAAb,iLAEc,IAAD,OACL,OACI,4BAAQC,UAAU,kBAAkBC,GAAIC,KAAKC,MAAMC,KAAKC,EAAGC,GAAIJ,KAAKC,MAAMC,KAAKG,EAAGC,EAAGN,KAAKC,MAAMM,OAC5FC,YAAa,WAAY,EAAKP,MAAMQ,SAAS,EAAKR,MAAMQ,SAAQ,IAChEC,aAAc,WAAY,EAAKT,MAAMQ,SAAS,EAAKR,MAAMQ,SAAQ,IACjEE,OAAQX,KAAKC,MAAMW,MAAOC,YAAab,KAAKC,MAAMY,YAClDC,KAAMd,KAAKC,MAAMc,OAASf,KAAKC,MAAMW,MAAQ,cAR7D,GAAgCI,IAAMC,WAczBC,EAAb,YAEI,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KACDkB,MAAQ,CAACC,wBAAwB,GACtC,EAAKC,GAAKC,IAAaC,SAAS,GAChC,EAAKJ,MAAQ,CAAEJ,QAAS,GAJT,EAFvB,oEASWS,EAAQC,GACPzB,KAAKC,MAAMyB,QAAQ1B,KAAKC,MAAMyB,OAAOF,EAAQC,KAVzD,8BAaYE,GACCA,IAAgC,IAAvB3B,KAAKmB,MAAMJ,QAAef,KAAK4B,SAAS,CAACb,QAAS,IAC5Df,KAAKC,MAAMQ,SAAST,KAAKC,MAAMQ,QAAQkB,KAfnD,+BAkBc,IAAD,OACDE,EAAYvC,IAAOU,KAAKC,MAAMW,OAAOkB,SACrCC,EAAQ,EACRC,EAAY,EACVC,EAAmC,KAAxBjC,KAAKC,MAAMiC,WACtBC,EAAQnC,KAAKC,MAAMmC,KAAKC,KAAI,SAACC,EAAKC,GACpCR,EAAQC,EAAY,EAAK/B,MAAMiC,WAC/B,IAAMM,EAAU,EAAKrB,MAAMJ,SAAWwB,EAChCE,EAAkB,kBAAM,EAAKb,SAAS,CAACb,OAAQyB,GAAW,EAAID,KAC9DG,EAAaF,EAAUF,EAAIK,eAAiBL,EAAII,WAChDE,EAAiBN,EAAIO,eAAeC,OAAS,EAAK7C,MAAM8C,oBACxDC,GAASN,EAAWI,OAAS,GAAK,EAAK7C,MAAMiC,WAAa,EAAKjC,MAAMgD,oBAAsBT,EAAUI,EACrGM,EAAYV,EAAU,EAAKvC,MAAMkD,cAAgB,EAAKlD,MAAMiD,UAC5DE,EAAmB,SAACC,EAAGC,EAAIxC,EAAMU,GAAd,OAAyB,uBAAG+B,UAAS,oBAAeL,EAAUjB,EAASqB,EAAlC,aAAyCN,EAAzC,MAC1D,uBAAGlD,UAAU,kBAAkB0D,MAAO,CAACC,gBAAgB,GAAD,OAAKxB,EAAS,EAAd,cAAqBA,EAAS,EAA9B,OAClDyB,QAAoB,aAAXlC,EAAwBiB,EAAmB,kBAAM,EAAKf,OAAOF,EAAQc,KAC9E,kBAACe,EAAD,CAAGvD,UAAU,kBAAkBgB,KAAMA,EAAM6C,MAAO1B,EAAU2B,OAAQ3B,IACpE,0BAAMnC,UAAU,kBAAkB6D,MAAO1B,EAAU2B,OAAQ3B,EAAUnB,KAAK,mBAG5E+C,EAAOvB,EAAIwB,OAASxB,EAAIwB,MAAMC,KAAO,EACrCC,EAAS1B,EAAIwB,OAASxB,EAAIwB,MAAMC,KAAO,EACvCE,EAA+C,SAA3B,EAAKhE,MAAMiE,YAA0B,EAAgC,WAA3B,EAAKjE,MAAMiE,YAA4BhB,EAAY,EAAKA,EAC5H,OACI,uBAAGpD,UAAU,yBACTqE,IAAK5B,EACL/B,YAAa,kBAAM,EAAKC,SAAQ,IAChCC,aAAc,kBAAM,EAAKD,SAAQ,IACjC8C,UAAS,oBAAe,EAAKtD,MAAMmE,kBAAoB,EAAKnE,MAAMM,OAAzD,aAAoEwB,EAApE,MACT,uBAAGjC,UAAU,yBAAyB0D,MAAO,CAACC,gBAAgB,GAAD,OAAKQ,EAAL,eAA4B,EAAKhE,MAAMiC,WAAvC,QACzD,0BAAMpC,UAAU,wBAAwBK,GAAI,EAAKF,MAAMiC,WAAY7B,EAA4B,KAAxB,EAAKJ,MAAMiC,WAC9EyB,MAAOT,EAAU,EAAE,EAAKjD,MAAMiC,WAAY0B,OAAgC,EAAxB,EAAK3D,MAAMiC,WAAiBc,EAAQf,EACtFnB,KAAK,QAAQuD,OAAO,sBACxB,0BAAMvE,UAAU,aAAawE,SAAU,EAAKrE,MAAMqE,SAAUxD,KAAMe,EAAW6B,QAASjB,GACjFC,EAAWL,KAAI,SAACkC,EAAOC,GAEpB,OADAxC,IACO,2BAAOmC,IAAKK,EAAKrE,EAAE,IAAIE,EAAGmE,EAAM,EAAKvE,MAAMiC,YAAaqC,OAGtE/B,GACG,0BAAM1C,UAAU,uBAAuBwE,SAAU,EAAKrE,MAAMwE,kBAAmB3D,KAAMlB,GAChF0C,EAAIO,eAAeR,KAAI,SAACkC,EAAOC,GAAR,OAAgB,2BAAOL,IAAKK,EAAKrE,EAAE,IAAIE,EAAGqC,EAAWI,OAAS,EAAK7C,MAAMiC,WAAasC,EAAM,EAAKvE,MAAM8C,qBAAsBwB,OAE7J,uBAAGzE,UAAU,yBACR,EAAKG,MAAMyE,UAAYtB,EAAiBuB,IAAc,EAAGjF,EAAe,eACxE0D,EAAiBS,EAAOe,IAAoBC,IAAc,IAAKxF,EAAcwE,EAAO,eAAiB,YACrGT,EAAiBY,EAASc,IAAsBC,IAAgB,EAAGtF,EAAgBuE,EAAS,eAAiB,cAC7G1B,EAAIO,eAAeC,OAAS,GAAKM,EAAiBZ,EAAUwC,IAAcC,IAAe,IAAKtF,EAAY,kBAM/H,OACI,uBAAGG,UAAU,sBAAsByD,UAAS,oBAAevD,KAAKC,MAAME,EAA1B,aAAgCH,KAAKC,MAAMI,EAA3C,MACvC8B,EAAM+C,eAzEvB,GAA8BlE,IAAMC,W,qlBCzBfkE,E,YAEjB,WAAYlF,GAAQ,IAAD,uBACf,4CAAMA,KAEDmF,YAAc,EAAKnF,MAAMmF,aAAe,IAC7C,EAAKC,aAAe,EAAKpF,MAAMoF,cAAgB,GAE/C,EAAKxE,YAAc,EAEnB,EAAKyE,kBAAoB,GACzB,EAAKC,oBAAsB,GAE3B,EAAKC,WAAa,GAClB,EAAKC,sBAAwB,GAC7B,EAAKC,cAAgB,IACrB,EAAKC,iBAAmB,GACxB,EAAKC,0BAA4B,GACjC,EAAKC,mBAAqB,GAC1B,EAAKC,4BAA8B,GAEnC,EAAKC,aAAe,EAEpB,EAAKC,iBAAmB,GACxB,EAAKC,oBAAsB,GAE3B,EAAKC,sBAAwB,GAE7B,EAAKC,gBAAkB,GACvB,EAAKC,iBAAmB,GACxB,EAAKC,eAAiB,GACtB,EAAKC,kBAAoB,GAEzB,EAAKC,wBAA0B,GAE/B,EAAKC,YAAc,EAAKL,gBAAkB,EAAKX,WAC/C,EAAKiB,YAAc,EAAKJ,eAAiB,EAAKb,WAE9C,EAAKkB,UAAY,EAAKP,gBAAkB,EAAI,EAAKX,WAAa,EAAKC,sBAAwB,EAAKC,cAAgB,EAAKU,iBACrH,EAAKO,cAAgB,SAACzG,GAAD,OAAUA,EAAKkC,KAAKwE,QAAO,SAACC,EAAMvE,GAAP,OAAeuE,EAAOvE,EAAII,WAAWI,SAAQ,IAC7F,EAAKgE,WAAa,SAACC,GAAD,OAAW,EAAKV,eAAiB,EAAKb,WAAawB,KAAKC,IAAI,EAAKzB,YAAauB,EAAM,GAAK,EAAKlB,oBAAsB,EAAKS,mBAC3I,EAAKY,aAAe,SAACC,EAAMC,GACvB,IAAMC,EAAaL,KAAKM,QAAQF,EAAO,GAAK,EAAKV,UAAY,EAAKhB,gBAAkB,EAAKC,iBAAmB,EAAKO,wBACjH,OAAQiB,EAAKI,MAAM,IAAIC,OAAJ,oBAAwBH,EAAxB,aAA+C,OAAS,IAAIhD,QAAO,SAAAoD,GAAI,OAAIA,EAAK3E,OAAS,MAEhH,EAAK4E,sBAAwB,SAACP,EAAMC,GAChC,IAAMC,EAAaL,KAAKM,QAAQF,EAAO,GAAK,EAAKV,UAAY,EAAKhB,gBAAkB,EAAKE,0BAA4B,EAAKM,wBAC1H,OAAQiB,EAAKI,MAAM,IAAIC,OAAJ,oBAAwBH,EAAxB,aAA+C,OAAS,IAAIhD,QAAO,SAAAoD,GAAI,OAAIA,EAAK3E,OAAS,MAGhH,EAAK6E,MAAQ1H,EAAM2H,KAEnB,IAAMC,EAAU,SAACC,GACb,IAAMzG,EAAKyG,EAAK,SACVC,EAAOD,EAAK,WACZE,EAAQF,EAAK,YAAgBG,OAC7BC,EAAQJ,EAAK,YAAgBG,OAC7BE,EAAYL,EAAK,gBACnBM,EAAM,UAAML,GACVM,EAAa,kBAAkBC,KAAKN,GAQ1C,OAPkB,MAAdK,GAAsBL,EAAMlF,OAAS,EACrCsF,EAAM,UAAML,EAAN,YAAcC,GACC,MAAdK,IACPD,EAAM,UAAMJ,IAIT,CAAC3G,KAAI0G,OAAMC,QAAOE,QAAOC,YAAWhB,KAF9B,WAAIiB,EAAJ,aAAeF,GAAQK,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAEpBC,SADhCV,EAAK,eAAqBA,EAAK,eAAmBG,OAAOM,QAAQ,KAAM,KAAO,KAhEpF,OAmEf,EAAKX,KAAO,CACRa,KAAMZ,EAAQ,EAAKF,MAAMc,MACzBC,SAAU,IAEd,EAAKf,MAAMe,SAASC,SAAQ,SAAAC,GACxB,EAAKhB,KAAKc,SAASG,KAAKD,EAAO,GAAGvG,IAAIwF,IACtC,EAAKD,KAAKc,SAASG,KAAKD,EAAO,GAAGvG,IAAIwF,OAE1C,EAAKD,KAAKc,SAASC,SAAQ,SAAAC,GAAM,OAAIA,EAAOE,MAAK,SAACC,EAAGC,GACjD,OAAOD,EAAEhB,OAASiB,EAAEjB,KAAQiB,EAAEb,UAAYY,EAAEZ,UAAca,EAAEjB,KAAOgB,EAAEhB,WAEzE,EAAKkB,aAAe,EAAKhJ,MAAM2H,KAAKqB,aAAa5G,KAAI,SAAA6G,GAAI,OAAIA,EAAKC,MAAM,KAAK9G,IAAI+G,IAAOC,YAAYC,KAAK,QAEzG,EAAKnI,MAAQ,CAACoI,UAAW,EAAKtJ,MAAMsJ,WAAa,GAAIC,WAAY,KAAMC,gBAAiB,EAAGC,eAAgB,GAhF5F,E,sEAmFT,IAAD,OAEL1J,KAAK2J,cAAgB3J,KAAKC,MAAM0J,cAChC3J,KAAK4J,sBAAwB5J,KAAKC,MAAM2J,sBACxC5J,KAAK6J,uBAAyB7J,KAAKC,MAAM4J,uBAGzC,IAAIC,EAAW,CAACrB,KAAK,EAAD,GAAMzI,KAAK4H,KAAKa,MAAOC,SAAU1I,KAAK4H,KAAKc,SAASrG,KAAI,iBAAM,OAClFrC,KAAK4H,KAAKc,SAASC,SAAQ,SAACC,EAAQpE,GAAT,OAAiBoE,EAAOD,SAAQ,SAAAb,GACvD,IAAMiC,EAAQvF,EAAM,IAAM,EACpBV,EAAQ,EAAK3C,MAAMoI,UAAUzB,EAAMzG,IACnC2I,EAAYlG,EAAQA,EAAMkG,UAAYhD,KAAKM,MAAM9C,EAAM,GACvDyF,EAAuB,EAAZD,EAAgBD,EAC5B,EAAKJ,eAAkBI,GAAOD,EAASpB,SAASuB,GAAUpB,KAA5B,KAAqCf,EAArC,CAA4CiC,QAAOjG,QAAOkG,YAAWC,oBAE5GH,EAASpB,SAASC,SAAQ,SAAAC,GAAM,OAAIA,EAAOE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEhB,OAASiB,EAAEjB,KAASiB,EAAEb,UAAYY,EAAEZ,UAAca,EAAEjB,KAAOgB,EAAEhB,WAUtH,IAPJ,IAAImC,EAAO,GAEHC,EAAQf,IAAOgB,QAAQN,EAASpB,UAAUrG,KAAI,SAAAyF,GAAK,OAAIA,EAAMC,QAAMe,OAAO5D,UAC1EmF,EAAMF,EAAM,GACZG,EAAO,EACPC,EAAavK,KAAKoF,YAAc+E,EAAMrH,OACtC0H,EAAiBxK,KAAKqF,aAAe8E,EAAMrH,OACtC2H,EAAI,EAAGA,EAAIN,EAAMrH,OAAQ2H,IAC1BN,EAAMM,KAAON,EAAMM,EAAE,IAAMH,EAAOC,GAAcE,EAAIN,EAAMrH,OAAS0H,EAAgBF,GAAQ,GAE3FJ,EAAKrB,KAAK,CAAC6B,KAAMP,EAAMM,EAAE,GAAIE,GAAIN,EAAKO,IAAKN,IAC3CD,EAAMF,EAAMM,GACZH,EAAO,GAGfJ,EAAKrB,KAAK,CAAC6B,KAAMP,EAAMA,EAAMrH,OAAO,GAAI6H,GAAIN,EAAKO,IAAKN,IAE1D,IAAMO,EAAgB,SAACjC,EAAQkC,GAAT,OAAiBlC,EAAOvE,QAAO,SAAAyD,GAAK,OAAIA,EAAMC,MAAQ+C,EAAIJ,MAAQ5C,EAAMC,MAAQ+C,EAAIH,OAGtGI,EAAcjB,EAASpB,SAAS5F,OAChCkI,EAAchE,KAAKM,MAAMyD,EAAc,GACrCE,EAAY3L,IAAO4L,OAAP5L,CAAe,IAC3B6L,EAAgB7L,IAAO8L,YAAYC,MAAM,KAAKC,UAAU,GAAGC,MAAM,IAAKC,UAAU,CAAC,GAAK,KAAMN,QAAQO,mBAAmBC,OAAOV,GAC9HW,EAAe7B,EAASpB,SAASrG,KAAI,SAACuJ,EAAG3B,GAAJ,OAAiB3K,IAAO6L,EAAcnE,KAAKM,MAAM2C,EAAW,KAAK1K,UAAU0K,EAAW,IAAM,EAAI,IAAO,OAC9I4B,EAAQ,CAACC,KAAM,GAAIC,MAAO,GAAIC,MAAO,IACnCC,EAAU,SAACC,EAAIC,EAAIC,EAAIC,EAAIzL,GAAjB,OAA2BiL,EAAMG,MAAMnD,KAAK,0BAAM1E,IAAK0H,EAAMG,MAAMlJ,OAAQoJ,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIxL,YAAa,EAAKA,YAAc,EAAGF,OAAQC,MAChK0L,EAAkB,SAACnM,EAAGgM,EAAIE,EAAIzL,GAAZ,OAAsBqL,EAAQ9L,EAAGgM,EAAIhM,EAAGkM,EAAIzL,IAC9D2L,EAAoB,SAACL,EAAIE,EAAI/L,EAAGO,GAAZ,OAAsBqL,EAAQC,EAAI7L,EAAG+L,EAAI/L,EAAGO,IAChE4L,EAAwB,SAAC9B,EAAMC,EAAIuB,EAAIC,EAAIC,EAAIC,GACjD,IAAMI,EAAUnL,IAAaC,SAAS,GAStC,OARAsK,EAAMC,KAAKjD,KACP,0BAAM1E,IAAKsI,GACP,oCAAgBpL,GAAIoL,EAASP,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIK,cAAc,kBAC3E,0BAAMC,OAAO,MAAOC,UAAWlC,IAC/B,0BAAMiC,OAAO,MAAMC,UAAWjC,OAIhC,SAAN,OAAgB8B,EAAhB,OAIJZ,EAAME,MAAMtD,KAAO,CACftI,EAAGH,KAAK0G,WAAaoD,EAASpB,SAAS5F,OAAS,GAAK,EAAI9C,KAAKwG,YAC9DnG,EAAGL,KAAKyG,YACR7F,MAAOqK,EACP7I,KAAM,CAAC,EAAD,GAAK0H,EAASrB,KAAd,CACF/F,WAAY1C,KAAKkH,aAAa4C,EAASrB,KAAKtB,KAAM,GAClDxE,eAAgB3C,KAAKkH,aAAa4C,EAASrB,KAAKtB,KAAMnH,KAAK+F,cAC3DlD,eAAgB7C,KAAK0H,sBAAsBoC,EAASrB,KAAKD,SAAUxI,KAAK+F,cACxEjC,MAAO9D,KAAKmB,MAAMoI,UAAUO,EAASrB,KAAKpH,OAE9C+F,KAAM,EACNyF,SAAU7M,KAAK+F,cAEnB8F,EAAME,MAAMtD,KAAK1B,MAAQ/G,KAAK2G,cAAckF,EAAME,MAAMtD,MACxDoD,EAAME,MAAMtD,KAAK7E,OAAS5D,KAAK8G,WAAW+E,EAAME,MAAMtD,KAAK1B,OAE3D8E,EAAME,MAAMrD,SAAWoB,EAASpB,SAASrG,KAAI,SAACuG,EAAQqB,GAAT,OAAsBC,EAAK7H,KAAI,SAACyI,EAAKgC,GAAY,MAAO,CACjG3M,EAAG,EAAKuG,UAAYuD,EAAW,EAAKzD,YACpCnG,EAAG,EACHO,MAAO+K,EAAa1B,GACpB7H,KAAMyI,EAAcjC,EAAQkC,GAC5BA,MACAgC,QACA9C,UAAWhD,KAAKM,MAAM2C,EAAW,GACjCA,kBAGJ4B,EAAME,MAAMrD,SAASC,SAAQ,SAACC,EAAQqB,GAAT,OAAsBrB,EAAOD,SAAQ,SAACzI,EAAM4M,GAC5C,IAArB5M,EAAKkC,KAAKU,SACd5C,EAAKkH,OAAQ6C,EAAWc,EAAc,GAA6D,IAAxDc,EAAME,MAAMrD,SAASuB,EAAS,GAAG6C,GAAO1K,KAAKU,SAChF,EAAK8G,uBAA2B,EAAKC,wBAA0BI,EAAW,IAAM,EAAU,EAAJ,EAC9F/J,EAAK2M,SAAY5C,EAAWc,EAAc,EAAK,EAAKhF,aAAe,EACnE7F,EAAKkC,KAAKuG,SAAQ,SAAArG,GACdA,EAAII,WAAa,EAAKwE,aAAa5E,EAAI6E,KAAMjH,EAAKkH,MAClD9E,EAAIK,eAAiB,EAAKuE,aAAa5E,EAAI6E,KAAMjH,EAAK2M,UACtDvK,EAAIO,eAAiB,EAAK6E,sBAAsBpF,EAAIkG,SAAUtI,EAAK2M,aAEvE3M,EAAK6G,MAAQ,EAAKJ,cAAczG,GAChCA,EAAK0D,OAAS,EAAKkD,WAAW5G,EAAK6G,cAGvC,IAAMgG,EAAUlB,EAAME,MAAMtD,KAAK7E,OAAS5D,KAAKgG,iBAC3CgH,EAAUD,EAAU/M,KAAKiG,oBACvBgH,EAAa/C,EAAK7H,KAAI,SAACuJ,EAAGkB,GAC5BjB,EAAME,MAAMrD,SAASC,SAAQ,SAAAC,GAAM,OAAIA,EAAOkE,GAAOzM,EAAI2M,EAAU,EAAKvG,eACxE,IAAMyG,EAAYrB,EAAME,MAAMrD,SAAS9B,QAAO,SAACC,EAAM+B,GAAP,OAAkB5B,KAAKC,IAAIJ,EAAM+B,EAAOkE,GAAOlJ,QAAU,KAAI,GAE3G,OADAoJ,GAAWE,EACJA,KAIDhN,EAAO2L,EAAME,MAAMtD,KAAM0E,EAAWtB,EAAME,MAAMrD,SAAS,GAAG,GAAI0E,EAAYvB,EAAME,MAAMrD,SAASqC,EAAc,GAAG,GACxHuB,EAAgBpM,EAAKC,EAAGD,EAAKG,EAAG0M,EAAS9B,GACzCsB,EAAkBY,EAAShN,EAAGiN,EAAUjN,EAAG4M,EAAS9B,GAExDY,EAAME,MAAMrD,SAASC,SAAQ,SAACC,EAAQqB,GAClC,IAAMoD,EAAUzE,EAAOvE,QAAO,SAAAnE,GAAI,OAAIA,EAAKkC,KAAKU,OAAS,KACzD,GAAuB,IAAnBuK,EAAQvK,QAAgBmH,EAAW,IAAM,EAA7C,CACA,IAAMqD,EAAYrD,EAAW,IAAM,EAAK,EAAIoD,EAAQ,GAAGP,MACnDS,EAAUF,EAAQvK,OAAS,EAAKuK,EAAQA,EAAQvK,OAAO,GAAGgK,MAAQ,EACtE,GAAI7C,EAAW,IAAM,EAAG,CACpB,IAAMuD,EAAc3B,EAAME,MAAMrD,SAASuB,EAAS,GAAG5F,QAAO,SAAAnE,GAAI,OAAIA,EAAKkC,KAAKU,OAAS,KACnF0K,EAAY1K,OAAS,IAAGyK,EAASvG,KAAKC,IAAIsG,EAAQC,EAAY,GAAGV,QAEzE,IAAK,IAAIA,EAAQQ,EAAW,EAAGR,GAASS,EAAQT,IAAS,CACrD,IAAI5M,EAAO0I,EAAOkE,GACdW,EAAMxD,EAAW,EAAI4B,EAAME,MAAMrD,SAASuB,EAAS,GAAG6C,GAAS,KAC7DY,GAAW,EAAK7D,wBAA+C,IAArB3J,EAAKkC,KAAKU,SAAkBmH,EAAW,GAAKwD,EAAIrL,KAAKU,OAAS,GAAOgK,IAAUS,GAAarN,EAAKG,EAAI,EAAKmF,WAAa,EAAKK,mBAAsB3F,EAAKG,EACvMH,EAAO0I,EAAOkE,EAAM,GACpBW,EAAMxD,EAAW,EAAI4B,EAAME,MAAMrD,SAASuB,EAAS,GAAG6C,EAAM,GAAK,KACjE,IAAMa,GAAS,EAAK9D,wBAA+C,IAArB3J,EAAKkC,KAAKU,QAAgBmH,EAAW,GAAKwD,EAAIrL,KAAKU,OAAS,EAAM5C,EAAKG,EAAI,EAAKoG,YAAc,EAAKK,WAAW,EAAKH,cAAc8G,IAAQ,EAAKnH,kBAAoB,EAAKT,mBAAsB3F,EAAKG,EAChPiM,EAAgBpM,EAAKC,EAAGuN,EAAQC,EAAMzN,EAAKU,OAE/C,GAAIqJ,EAAW,IAAM,EAAG,CACpB,IAAM/J,EAAO0I,EAAO,GACd6E,EAAMxD,EAAW,EAAI4B,EAAME,MAAMrD,SAASuB,EAAS,GAAG,GAAK,KAC3D0D,GAAS,EAAK9D,wBAA+C,IAArB3J,EAAKkC,KAAKU,QAAgBmH,EAAW,GAAKwD,EAAIrL,KAAKU,OAAS,EAAM5C,EAAKG,EAAI,EAAKmF,WAAa,EAAKK,mBAAsB3F,EAAKG,EAC3KiM,EAAgBpM,EAAKC,EAAG4M,EAASY,EAAMnB,EAAsBvB,EAAW/K,EAAKU,MAAOV,EAAKC,EAAG4M,EAAS7M,EAAKC,EAAGwN,QAC1G,CACH,IAAMzN,EAAO0I,EAAO0E,GACdG,EAAM5B,EAAME,MAAMrD,SAASuB,EAAS,GAAGqD,GACvCK,EAAOzN,EAAKG,EAAI,EAAKmF,WAAa,EAAKK,mBACvC6H,EAASxN,EAAKG,EACpBiM,EAAgBpM,EAAKC,EAAGuN,EAAQC,EAAMzN,EAAKU,OAC3C2L,EAAkBrM,EAAKC,EAAGsN,EAAItN,EAAGwN,EAAMnB,EAAsBtM,EAAKU,MAAO6M,EAAI7M,MAAOV,EAAKC,EAAGwN,EAAMF,EAAItN,EAAGwN,SAIjH,IAAMjM,EAAS,SAACF,EAAQC,EAAQmM,GAC5B,IAAMC,EAAM,KAAO,EAAK1M,OACnB0M,EAAOtE,UAAU9H,EAAOJ,KAAmB,aAAXG,GAAoC,eAAXA,GAAsC,aAAXA,IACrFqM,EAAOtE,UAAU9H,EAAOJ,IAAM,CAAC0C,KAAM,EAAGiG,UAAWvI,EAAOuI,YAE/C,aAAXxI,GAAyBqM,EAAOtE,UAAU9H,EAAOJ,IAAI0C,MAAQ,GAC7D8J,EAAOtE,UAAU9H,EAAOJ,IAAI0C,KAAO,EACnC,EAAKnC,SAASiM,IACI,eAAXrM,GAA2BqM,EAAOtE,UAAU9H,EAAOJ,IAAI0C,MAAQ,GACtE8J,EAAOtE,UAAU9H,EAAOJ,IAAI0C,MAAQ,EACpC,EAAKnC,SAASiM,IACI,iBAAXrM,GAA6BqM,EAAOtE,UAAU9H,EAAOJ,KAA4C,IAArCwM,EAAOtE,UAAU9H,EAAOJ,IAAI0C,MAC/F8J,EAAOtE,UAAU9H,EAAOJ,IAAI0C,KAAO,EACnC,EAAKnC,SAASiM,IACI,gBAAXrM,GAAkD,OAAtBqM,EAAOrE,YAC1CqE,EAAOrE,WAAa/H,EACpB,EAAKG,SAASiM,IACI,aAAXrM,IACPqM,EAAOtE,UAAU9H,EAAOJ,IAAI2I,UAAY4D,EACxCC,EAAOrE,WAAa,KACpB,EAAK5H,SAASiM,KAIhBC,EAAkBjC,EAAME,MAAMrD,SAASrG,KAAI,SAAAuG,GAAM,OAAIA,EAAOA,EAAO9F,OAAO,MAAI8D,QAAO,SAACC,EAAM3G,GAC9F,IAAI6N,EAAU7N,EAAKG,EAKnB,OAJAH,EAAKkC,KAAKuG,SAAQ,SAAArG,GACduE,EAAOG,KAAKC,IAAIJ,EAAMkH,GAAWzL,EAAIK,eAAeG,OAAS,GAAK,EAAK+C,mBAAqB,EAAIvD,EAAIO,eAAeC,OAAS,EAAKgD,4BAAwD,EAA1B,EAAKD,oBACpKkI,GAAWzL,EAAII,WAAWI,OAAS,EAAK+C,sBAErCgB,IACRmG,GAEGgB,EAAc5E,IAAO6E,YAAYpC,EAAME,MAAMrD,UAAUI,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE+D,QAAU9D,EAAE8D,MAAU9D,EAAEiB,SAAWlB,EAAEkB,SAAajB,EAAE8D,MAAQ/D,EAAE+D,SAC7IkB,EAAYnF,KAAKgD,EAAME,MAAMtD,MAE7B,IAAMyF,EAASlO,KAAK0G,UAAYoD,EAASpB,SAAS5F,OAC5CqL,EAAyBnO,KAAKiJ,aAAa5G,KAAI,SAAA6G,GAAI,OAAIA,EAAKC,MAAM,QAClEiF,EAAoBD,EAAuB9L,KAAI,SAACgM,EAAQ9L,GAAT,OACjD,0BAAM4B,IAAK5B,GACN8L,EAAOnJ,UAAU7C,KAAI,SAACkC,EAAOC,GAAR,OAAgB,2BAAOL,IAAKK,EAAKrE,EAAE,IAAIE,GAAImE,EAAM,EAAKe,qBAAsBhB,UAGpG+J,EAAsBH,EAAuBvH,QAAO,SAACC,EAAMwH,GAAP,OAAkBrH,KAAKC,IAAIJ,EAAMwH,EAAOvL,UAAS,GAAK9C,KAAKuF,oBACrHyH,GAAWsB,EAAsBtO,KAAKuF,oBAEtC,IAAMgJ,EAAiBvH,KAAKC,IAAI,EAAG6G,EAAkBd,GAC/CwB,EAAwBrD,EAAc9I,KAAI,SAAAzB,GAAK,OAAItB,IAAOsB,GAAOrB,UAAU,OAC3EkP,EAA4BtD,EAAc9I,KAAI,SAAAzB,GAAK,OAAItB,IAAOsB,GAAOrB,UAAU,OAC/EmP,EAAgCvD,EAAc9I,KAAI,SAACzB,EAAO4D,GAC5D,IAAMrE,EAAI0L,EAAME,MAAMrD,SAAa,EAAJlE,GAAO0F,EAAKpH,OAAO,GAAG3C,EACrD,OAAOqM,EAAsBlN,IAAOsB,GAAOrB,UAAU,IAAM,QAASY,EAAG6M,EAAS7M,EAAG6M,EAAQuB,MAEzFI,EAA4BxD,EAAc9I,KAAI,SAAAzB,GAAK,OAAItB,IAAOsB,GAAOrB,UAAU,OAC/EqP,EAAgCzD,EAAc9I,KAAI,SAAAzB,GAAK,OAAItB,IAAOsB,GAAOrB,UAAU,OACnFsP,EAAoC1D,EAAc9I,KAAI,SAACzB,EAAO4D,GAChE,IAAMrE,EAAI0L,EAAME,MAAMrD,SAAa,EAAJlE,GAAO0F,EAAKpH,OAAO,GAAG3C,EACrD,OAAOqM,EAAsBlN,IAAOsB,GAAOrB,UAAU,IAAM,QAASY,EAAG6M,EAAS7M,EAAG6M,EAAQuB,MAG/F,OAAO,yBAAKzO,UAAU,MAAMuB,GAAIrB,KAAKC,MAAMoB,GAAsDsC,MAAM,OAAOmL,QAAO,cAASZ,EAAT,YAAmBlB,EAAQuB,IAC3I1C,EAAMC,KACP,4BAAQzK,GAAG,eACP,oCAAgB0N,aAAc/O,KAAK6F,mBAAoBmJ,GAAG,mBAG1D,uBAAGlP,UAAU,kBACT,0BAAMK,EAAE,IAAIE,EAAE,IAAIsD,MAAOuK,EAAQtK,OAAQmJ,EAASjM,KAAMxB,IAAO2L,GAAW1L,UAAU,OAIxF6O,EAAkB/L,KAAI,SAACF,EAAOqC,GAC1B,OAAO,uBAAG1E,UAAU,iBAAiBqE,IAAKK,EAAKyK,QAAmC,OAA1B,EAAK9N,MAAMqI,WAAsB,EAAI,GACzF,0BAAMrJ,EAAG,EAAKuG,UAAUlC,EAAI,EAAGnE,EAAG0M,EAASpJ,MAAsB,EAAf,EAAK+C,UAAa9C,OAAQoJ,EAAQD,EAASjM,KAAM0N,EAAsBhK,KACzH,0BAAMrE,EAAG,EAAKuG,UAAUlC,EAAI,EAAGnE,EAAG2M,EAASrJ,MAAsB,EAAf,EAAK+C,UAAa9C,OAAQ2K,EAAgBzN,KAAM4N,EAA8BlK,KAChI,uBAAGjB,UAAS,oBAAe,EAAKmD,UAAUlC,EAAI,EAAE,EAAKgC,YAAzC,aAAyDwG,EAAQ,EAAKzH,oBAAoB,EAA1F,KAAgGzE,KAAM2N,EAA0BjK,GAAMF,SAAU,EAAKgB,mBAAoBnD,OAK7L+H,EAAK7H,KAAI,SAACyI,EAAKtG,GAAN,OACT,uBAAGL,IAAKK,EAAK1E,UAAU,qBAAqByD,UAAS,uBAAkBsI,EAAME,MAAMrD,SAAS,GAAGlE,GAAKnE,EAAI,EAAKmF,WAAa,EAAKa,eAAiB4G,EAAWzI,GAAtG,MACjD,0BAAM1E,UAAU,qBAAqBK,EAAE,IAAIE,GAAI4M,EAAWzI,GAAMb,MAAOuK,EAAQtK,OAAQqJ,EAAWzI,GAAMyK,QAAUzK,IAAQ,EAAKrD,MAAMuI,cAAiB,GAAM,IAC5J,0BAAM5J,UAAU,qBAAqBwE,SAAU,EAAKgB,kBAAmBnF,EAAG,EAAKgG,gBAAiB9F,GAAI,EAAKiF,kBAAkB,EAAG2J,QAAUzK,IAAQ,EAAKrD,MAAMuI,cAAiB,GAAM,GAC7KoB,EAAIJ,OAASI,EAAIH,GAAKG,EAAIJ,KAA1B,UAAoCI,EAAIJ,KAAxC,cAAkDI,EAAIH,SAK/DkB,EAAME,MAAMrD,SAASrG,KAAI,SAACuG,EAAQpE,GAC9B,GAAIA,EAAM,IAAM,EAAG,OAAO,0BAAML,IAAKK,IACrC,IAAM6I,EAAUzE,EAAOvE,QAAO,SAAAnE,GAAI,OAAIA,EAAKkC,KAAKU,OAAS,KACnDoM,EAAarD,EAAME,MAAMrD,SAASlE,EAAI,GAAGH,QAAO,SAAAnE,GAAI,OAAIA,EAAKkC,KAAKU,OAAS,KACjF,GAAuB,IAAnBuK,EAAQvK,QAAsC,IAAtBoM,EAAWpM,OAAc,OAAO,0BAAMqB,IAAKK,IACvE,IAAMF,EAAmC,EAAxB,EAAKqB,iBAChBtF,GAAyB,IAAnBgN,EAAQvK,QAAiBoM,EAAWpM,OAAS,GAAKoM,EAAW,GAAGpC,OAASO,EAAQ,GAAGP,MAC3FoC,EAAW,GAAG7O,EAAI,EAAKmF,WAAa,EAAKK,mBACzCwH,EAAQ,GAAGhN,EAAI,EAAKwF,oBAAuBvB,EAAW,EACrDnE,EAAIyI,EAAO,GAAGzI,EAAI,EAAKqF,WAAa,EAAKC,sBACzC7E,EAAQtB,IAAOqM,EAAanH,IAAM1C,OAAO,GAC/C,OAAO,0BAAMqC,IAAKK,EAAKrE,EAAGA,EAAGE,EAAGA,EAAGS,KAAMF,EAAO0D,SAAUA,GAAW,EAAK2E,aAAajC,KAAKM,MAAM9C,EAAM,QAG/GqH,EAAMG,MACNgC,EAAY3L,KAAI,SAACnC,EAAMsE,GAAP,OAAetE,EAAKkC,KAAKU,OAAS,GAC/C,kBAAC,EAAD,CAAYqB,IAAKK,EAAKtE,KAAMA,EAChBK,OAAQ,EAAKiF,WACbtD,WAAY,EAAK2D,mBACjBjF,MAAOV,EAAKU,MACZC,YAAa,EAAKA,YAClBJ,QAAS,SAACkB,GAAD,OACL,EAAKC,SAAL,KAAkB,EAAKT,MAAvB,CACIsI,eAAgB9H,EAAQ6C,GAAO,EAC/BkF,cAAe/H,EAAQzB,EAAK4M,OAAS,MAG7C/L,OAAQyD,IAAQ,EAAKrD,MAAMsI,oBAE3C,uBAAG3J,UAAU,2BACZkO,EAAY3L,KAAI,SAACnC,EAAMsE,GAAP,OAAetE,EAAKkC,KAAKU,OAAS,GAC/C,kBAAC,EAAD,CAAUqB,IAAKK,EACTpC,KAAMlC,EAAKkC,KACXjC,EAAGD,EAAKC,EAAGE,EAAGH,EAAKG,EACnBE,OAAQ,EAAKiF,WACbtD,WAAY,EAAK2D,mBACjB9C,oBAAqB,EAAK+C,4BAC1B5C,WAAYhD,EAAKkH,KAAO,GAAK,EAAKV,UAAY,EAAKhB,cACnDvC,eAAgBjD,EAAK2M,SAAW,GAAK,EAAKnG,UAAY,EAAKhB,cAC3D9E,MAAOV,EAAKU,MACZ0D,SAAU,EAAKqB,iBACflB,kBAAmB,EAAKmB,0BACxB/E,YAAa,EAAKA,YAClBa,OAAQA,EACR0C,kBAAmB,EAAKqB,sBACxBhF,QAAS,SAACkB,GAAD,OAAW,EAAKC,SAAL,KAAkB,EAAKT,MAAvB,CAA8BsI,eAAgB9H,EAAQ6C,GAAO,MACjFE,SAAqC,qBAApBxE,EAAK8J,UACtB/G,oBAAqB,EAAKsD,wBAC1BrC,YAAchE,EAAK8J,YAAcgB,EAAc,EAAK,QAAY9K,EAAK+J,WAAac,EAAc,EAAK,SAAW,aAGtHqD,EAAkB/L,KAAI,SAACF,EAAOqC,GAC1B,IAAM2K,EAAsC,OAA1B,EAAKhO,MAAMqI,YAAuBhF,IAAQ,EAAKrD,MAAMqI,WAAWQ,UAClF,OAAO,uBAAGlK,UAAU,iBAAiBqE,IAAKK,EAAKyK,QAAmC,OAA1B,EAAK9N,MAAMqI,WAAsB,EAAI,EAAG4F,WAAsC,OAA1B,EAAKjO,MAAMqI,WAAsB,SAAW,OAAQ9F,QAAS,kBAAMhC,EAAO,WAAY,EAAKP,MAAMqI,WAAYhF,KACrN,0BAAM1E,UAAU,sBAAsBK,EAAG,EAAKuG,UAAUlC,EAAI,EAAGnE,EAAG0M,EAASpJ,MAAsB,EAAf,EAAK+C,UAAa9C,OAAQoJ,EAAQD,EAASjM,KAAM6N,EAA0BnK,KAC7J,0BAAM1E,UAAU,sBAAsBK,EAAG,EAAKuG,UAAUlC,EAAI,EAAGnE,EAAG2M,EAASrJ,MAAsB,EAAf,EAAK+C,UAAa9C,OAAQ2K,EAAgBzN,KAAM+N,EAAkCrK,KACpK,uBAAG1E,UAAU,sBAAsB0D,MAAO,CAAC6L,eAAgBF,EAAY,YAAc,IAAK5L,UAAS,oBAAe,EAAKmD,UAAUlC,EAAI,EAAE,EAAKgC,YAAzC,aAAyDwG,EAAQ,EAAKzH,oBAAoB,EAA1F,KAAgGzE,KAAM8N,EAA8BpK,GAAMF,SAAU,EAAKgB,mBAAoBnD,Y,GA3XjQnB,IAAMC,W,gmBCAxBqO,E,YAEjB,WAAYrP,GAAQ,IAAD,8BACf,4CAAMA,KACDkB,MAAQ,CACToI,UAAW,EAAKtJ,MAAMsJ,WAAa,GACnCgG,KAAM,EAAKtP,MAAMsP,OAAQ,EACzBC,YAAa,IACb7F,eAAe,EACfE,wBAAwB,GAPb,E,oEAYf7J,KAAK4B,SAAL,KAAkB5B,KAAKmB,MAAvB,CAA8BoO,MAAOvP,KAAKmB,MAAMoO,U,8BAG5CE,GACJ,GAAIA,EACAC,IAAOC,aAAaC,SAASC,eAAe,cAA5C,+BACC,CACD,IAAMC,EAAWF,SAASC,eAAe,cAAcf,QAAQiB,QAAQpM,MACjEqM,EAAcJ,SAASK,KAAKC,YAClCR,IAAOC,aAAaC,SAASC,eAAe,cAA5C,mCAA+F,CAAC3E,MAAO8E,EAAcF,O,2BAIxHK,GACDnQ,KAAK4B,SAAL,KAAkB5B,KAAKmB,MAAvB,CAA8BqO,YAAaxI,KAAKoJ,IAAIpJ,KAAKC,IAAIjH,KAAKmB,MAAMqO,aAAeW,GAAO,GAAK,IAAK,KAAM,U,+BAGxG,IAAD,OACL,OACI,yBAAKrQ,UAAU,gBAAgB0D,MAAO,CAACG,MAAM,GAAD,OAAK3D,KAAKmB,MAAMqO,YAAhB,OACxC,yBAAK1P,UAAU,eACX,yBAAKA,UAAU,wBAAwB4D,QAAS,kBAAM,EAAK6L,SACvD,kBAAC,IAAD,CAAMc,KAAK,QAAQC,MAAOtQ,KAAKmB,MAAMoO,KAAO,SAAW,UACnDgB,aAAcjR,IAAO,OAAOC,UAAU,IAAKiR,MAC3ChN,MAAO,CAAC5C,MAAOtB,IAAO,OAAOC,UAAU,IAAKiR,UAEpD,yBAAK1Q,UAAU,wBAAwB4D,QAAS,cAC5C,kBAAC,IAAD,CAAM2M,KAAK,YAAYC,MAAM,WAAW9M,MAAO,CAAC5C,MAAOtB,IAAO,SAASC,UAAU,IAAKiR,UAE1F,yBAAK1Q,UAAU,wBAAwB4D,QAAS,kBAAM,EAAK+M,SAAQ,KAC/D,kBAAC,IAAD,CAAMJ,KAAK,aAAaC,MAAM,UAAUC,aAAcjR,IAAO,UAAUC,UAAU,IAAKiR,SAE1F,yBAAK1Q,UAAU,wBAAwB4D,QAAS,kBAAM,EAAK+M,SAAQ,KAC/D,kBAAC,IAAD,CAAMJ,KAAK,SAASC,MAAM,UAAUC,aAAcjR,IAAO,QAAQC,UAAU,IAAKiR,SAEpF,yBAAK1Q,UAAU,wBAAwB4D,QAAS,kBAAM,EAAKgN,MAAK,KAC5D,kBAAC,IAAD,CAAML,KAAK,WAAWC,MAAM,WAAW9M,MAAO,CAAC5C,MAAOtB,IAAO,UAAUC,UAAU,IAAKiR,UAE1F,yBAAK1Q,UAAU,wBAAwB4D,QAAS,kBAAM,EAAKgN,MAAK,KAC5D,kBAAC,IAAD,CAAML,KAAK,UAAUC,MAAM,WAAW9M,MAAO,CAAC5C,MAAOtB,IAAO,UAAUC,UAAU,IAAKiR,UAEzF,yBAAK1Q,UAAU,wBAAwB4D,QAAS,kBAAM,EAAK9B,SAAL,KAAkB,EAAKT,MAAvB,CAA8BwI,eAAgB,EAAKxI,MAAMwI,mBAC3G,kBAAC,IAAD,CAAM0G,KAAI,aAAQrQ,KAAKmB,MAAMwI,cAAgB,GAAK,cAAgB2G,MAAM,UAAUC,aAAcjR,IAAO,QAAQC,UAAU,IAAKiR,SAElI,yBAAK1Q,UAAU,wBAAwB4D,QAAS,kBAAM,EAAK9B,SAAL,KAAkB,EAAKT,MAAvB,CAA8B0I,wBAAyB,EAAK1I,MAAM0I,4BACpH,kBAAC,IAAD,CAAMwG,KAAK,eAAeC,MAAM,WAAW9M,MAAO,CAAC5C,MAAOtB,IAAO,UAAUC,UAAU,IAAKiR,WAGlG,kBAAC,EAAD,CAAWnP,GAAG,aAAauG,KAAM5H,KAAKC,MAAM2H,KAAM2B,UAAWvJ,KAAKuJ,UAC9DI,cAAe3J,KAAKmB,MAAMwI,cAAeE,uBAAwB7J,KAAKmB,MAAM0I,8B,GA/D/D7I,IAAMC,WCQxB0P,MAVf,WACE,OACE,yBAAK7Q,UAAU,OACb,6BACE,kBAAC,EAAD,CAAK8H,KAAMgJ,OCGCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzJ,MACvB,2DCZN0J,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SD2H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c2df9f2.chunk.js","sourcesContent":["import React from 'react'\nimport { ReactComponent as IconThumbsUp } from '@ant-design/icons-svg/inline-svg/outline/like.svg'\nimport { ReactComponent as IconThumbsDown } from '@ant-design/icons-svg/inline-svg/outline/dislike.svg'\nimport { ReactComponent as IconThumbsUpSolid } from '@ant-design/icons-svg/inline-svg/fill/like.svg'\nimport { ReactComponent as IconThumbsDownSolid } from '@ant-design/icons-svg/inline-svg/fill/dislike.svg'\nimport { ReactComponent as IconExchange } from '@ant-design/icons-svg/inline-svg/outline/pull-request.svg'\nimport { ReactComponent as IconCaretDown } from '@ant-design/icons-svg/inline-svg/outline/arrows-alt.svg'\nimport { ReactComponent as IconCaretUp } from '@ant-design/icons-svg/inline-svg/outline/shrink.svg'\nimport chroma from 'chroma-js'\nimport randomstring from 'randomstring'\nimport './node.css'\n\nconst ThumbUpColor = chroma(\"green\").luminance(0.3).desaturate(1)\nconst ThumbDownColor = chroma(\"red\").luminance(0.3).desaturate(2)\nconst ExchangeColor = chroma(\"blue\").luminance(0.3).desaturate(1)\nconst CaretColor = chroma(\"grey\").luminance(0.3)\nconst AbstractColor = chroma(\"grey\").luminance(0.1)\n\nexport class NodeCircle extends React.Component {\n    \n    render() {\n        return (\n            <circle className=\"era-node-circle\" cx={this.props.node.x} cy={this.props.node.y} r={this.props.radius}\n                onMouseOver={() => { if (this.props.onHover) this.props.onHover(true) }}\n                onMouseLeave={() => { if (this.props.onHover) this.props.onHover(false) }}\n                stroke={this.props.color} strokeWidth={this.props.strokeWidth}\n                fill={this.props.expand ? this.props.color : \"white\"}/>\n        )\n    }\n\n}\n\nexport class NodeText extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {displayInteractionTool: false}\n        this.id = randomstring.generate(8)\n        this.state = { expand: -1 }\n    }\n\n    onEdit(action, source) {\n        if (this.props.onEdit) this.props.onEdit(action, source)\n    }\n\n    onHover(hover) {\n        if (!hover && this.state.expand !== -1) this.setState({expand: -1})\n        if (this.props.onHover) this.props.onHover(hover)\n    }\n\n    render() {\n        let textColor = chroma(this.props.color).darken()\n        let baseY = 0\n        let textLines = 0\n        const iconSize = this.props.lineHeight * 1.25\n        const texts = this.props.pins.map((pin, _idx) => {\n            baseY = textLines * this.props.lineHeight\n            const isFocus = this.state.expand === _idx\n            const collapseHandler = () => this.setState({expand: isFocus ? -1 : _idx})\n            const textPieces = isFocus ? pin.fullTextPieces : pin.textPieces\n            const abstractHeight = pin.abstractPieces.length * this.props.secondaryLineHeight\n            const iconY = (textPieces.length - 1) * this.props.lineHeight + this.props.editButtonMarginTop + isFocus * abstractHeight\n            const textWidth = isFocus ? this.props.fullTextWidth : this.props.textWidth\n            const generateEditIcon = (T, dx, fill, action) => <g transform={`translate(${textWidth-iconSize*dx}, ${iconY})`}>\n                <g className=\"paper-edit-icon\" style={{transformOrigin: `${iconSize/2}px ${iconSize/2}px`}}\n                    onClick={action === \"collapse\" ? collapseHandler : (() => this.onEdit(action, pin))}>\n                    <T className=\"paper-edit-icon\" fill={fill} width={iconSize} height={iconSize}/>\n                    <rect className=\"paper-edit-icon\" width={iconSize} height={iconSize} fill=\"transparent\"/>\n                </g>\n            </g>\n            const isUp = pin.edits && pin.edits.rate > 0\n            const isDown = pin.edits && pin.edits.rate < 0\n            const transformOriginX = (this.props.scaleOrigin === \"left\") ? 0 : (this.props.scaleOrigin === \"middle\" ? (textWidth / 2) : textWidth)\n            return (\n                <g className=\"paper-view-group-outer\"\n                    key={_idx}\n                    onMouseOver={() => this.onHover(true)}\n                    onMouseLeave={() => this.onHover(false)}\n                    transform={`translate(${this.props.textLeadingMargin + this.props.radius}, ${baseY})`}>\n                    <g className=\"paper-view-group-inner\" style={{transformOrigin: `${transformOriginX}px ${-this.props.lineHeight}px`}}>\n                        <rect className=\"paper-text-background\" x={-this.props.lineHeight} y={-this.props.lineHeight * 2.5}\n                            width={textWidth+2*this.props.lineHeight} height={this.props.lineHeight * 4 + iconY + iconSize}\n                            fill=\"white\" filter=\"url(#blur-filter)\"/>\n                        <text className=\"paper-text\" fontSize={this.props.fontSize} fill={textColor} onClick={collapseHandler}>\n                            {textPieces.map((_text, idx) => {\n                                textLines++\n                                return <tspan key={idx} x=\"0\" y={idx * this.props.lineHeight}>{_text}</tspan>\n                            })}\n                        </text>\n                        {isFocus && \n                            <text className=\"paper-abstract-inner\" fontSize={this.props.secondaryFontSize} fill={AbstractColor}>\n                                {pin.abstractPieces.map((_text, idx) => <tspan key={idx} x=\"0\" y={textPieces.length * this.props.lineHeight + idx * this.props.secondaryLineHeight}>{_text}</tspan>)}\n                            </text>}\n                        <g className=\"paper-edit-icon-group\">\n                            {this.props.editable && generateEditIcon(IconExchange, 6, ExchangeColor, \"to-exchange\")}\n                            {generateEditIcon(isUp ? IconThumbsUpSolid : IconThumbsUp, 4.5, ThumbUpColor, isUp ? \"thumb-delete\" : \"thumb-up\")}\n                            {generateEditIcon(isDown ? IconThumbsDownSolid : IconThumbsDown, 3, ThumbDownColor, isDown ? \"thumb-delete\" : \"thumb-down\")}\n                            {pin.abstractPieces.length > 0 && generateEditIcon(isFocus ? IconCaretUp : IconCaretDown, 1.5, CaretColor, \"collapse\")}\n                        </g>\n                    </g>\n                </g>\n            )\n        })\n        return (\n            <g className=\"era-node-text-group\" transform={`translate(${this.props.x}, ${this.props.y})`}>\n                {texts.reverse()}\n            </g>\n        )\n    }\n}","import React from 'react'\nimport { NodeCircle, NodeText } from './node'\nimport randomstring from 'randomstring'\nimport chroma from 'chroma-js'\nimport lodash from 'lodash'\nimport './index.css'\n\nexport default class MRTViewer extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.EraMinRatio = this.props.EraMinRatio || 0.05\n        this.lastEraRatio = this.props.lastEraRatio || 0.2\n\n        this.strokeWidth = 4\n\n        this.labelTextFontSize = 64\n        this.labelTextLineHeight = 72\n\n        this.nodeRadius = 20\n        this.nodeTextLeadingMargin = 20\n        this.nodeTextWidth = 260\n        this.nodeTextFontSize = 18\n        this.nodeTextSecondaryFontSize = 16\n        this.nodeTextLineHeight = 20\n        this.nodeTextSecondaryLineHeight = 18\n\n        this.nodeFullSpan = 2\n\n        this.horizonMarginTop = 32\n        this.horizonMarginBottom = 48\n\n        this.averageFontWidthRatio = 0.6\n        \n        this.nodePaddingLeft = 20\n        this.nodePaddingRight = 20\n        this.nodePaddingTop = 32\n        this.nodePaddingBottom = 12\n\n        this.nodeEditButtonMarginTop = 10\n\n        this.nodeOffsetX = this.nodePaddingLeft + this.nodeRadius\n        this.nodeOffsetY = this.nodePaddingTop + this.nodeRadius\n        \n        this.nodeWidth = this.nodePaddingLeft + 2 * this.nodeRadius + this.nodeTextLeadingMargin + this.nodeTextWidth + this.nodePaddingRight\n        this.nodeTextLines = (node) => node.pins.reduce((prev, pin) => prev + pin.textPieces.length, 0)\n        this.nodeHeight = (lines) => this.nodePaddingTop + this.nodeRadius + Math.max(this.nodeRadius, (lines-1) * this.nodeTextLineHeight) + this.nodePaddingBottom\n        this.nodeTextFold = (text, span) => {\n            const textLength = Math.floor(((span - 1) * this.nodeWidth + this.nodeTextWidth) / (this.nodeTextFontSize * this.averageFontWidthRatio))\n            return (text.match(new RegExp(`([^\\\\n]{1,${textLength}})(\\\\s|$)`, 'g')) || []).filter(line => line.length > 0)\n        }\n        this.nodeTextSecondaryFold = (text, span) => {\n            const textLength = Math.floor(((span - 1) * this.nodeWidth + this.nodeTextWidth) / (this.nodeTextSecondaryFontSize * this.averageFontWidthRatio))\n            return (text.match(new RegExp(`([^\\\\n]{1,${textLength}})(\\\\s|$)`, 'g')) || []).filter(line => line.length > 0)\n        }\n\n        this._data = props.data\n\n        const extract = (paper) => {\n            const id = paper[\"paper_id\"]\n            const year = paper[\"paper_year\"]\n            const venue = paper[\"paper_venue\"].trim()\n            const title = paper[\"paper_title\"].trim()\n            const citations = paper[\"paper_citations\"]\n            let prefix = `${year}`\n            const venue_year = /^(19|20)\\d{2}\\b/.exec(venue)\n            if (venue_year == null && venue.length > 0) {\n                prefix = `${year} ${venue}`\n            } else if (venue_year != null) {\n                prefix = `${venue}`\n            }\n            const text = `[${prefix}] ${title}`.replace('\\t', ' ').replace('\\n', ' ')\n            const abstract = paper[\"paper_abstract\"] ? paper[\"paper_abstract\"].trim().replace('\\t', ' ') : \"\"\n            return {id, year, venue, title, citations, text, abstract}\n        }\n        this.data = {\n            root: extract(this._data.root),\n            branches: []\n        }\n        this._data.branches.forEach(branch => {\n            this.data.branches.push(branch[0].map(extract))\n            this.data.branches.push(branch[1].map(extract))\n        })\n        this.data.branches.forEach(branch => branch.sort((a, b) => {\n            return a.year === b.year ? (b.citations - a.citations) : (b.year - a.year)\n        }))\n        this.clusterNames = this.props.data.clusterNames.map(name => name.split(' ').map(lodash.capitalize).join(' '))\n\n        this.state = {userEdits: this.props.userEdits || {}, toExchange: null, focusNodeIndex: -1, focusEraIndex: -1}\n    }\n\n    render() {\n\n        this.hideSubBranch = this.props.hideSubBranch\n        this.disableTextBranchSpan = this.props.disableTextBranchSpan\n        this.disableTextClusterSpan = this.props.disableTextClusterSpan\n\n        // initialize dataView (filter subBranch is hideSubBranch is enabled)\n        let dataView = {root: {...this.data.root}, branches: this.data.branches.map(() => [])}\n        this.data.branches.forEach((branch, idx) => branch.forEach(paper => {\n            const isSub = idx % 2 === 1\n            const edits = this.state.userEdits[paper.id]\n            const clusterID = edits ? edits.clusterID : Math.floor(idx / 2)\n            const branchID = clusterID * 2 + isSub\n            if (!this.hideSubBranch || !isSub) dataView.branches[branchID].push({...paper, isSub, edits, clusterID, branchID})\n        }))\n        dataView.branches.forEach(branch => branch.sort((a, b) => (a.year === b.year) ? (b.citations - a.citations) : (b.year - a.year)))\n\n        // calculate eras according to density of paper\n        let eras = []\n        {\n            let years = lodash.flatten(dataView.branches).map(paper => paper.year).sort().reverse()\n            let _to = years[0]\n            let _cnt = 1\n            let eraMinSize = this.EraMinRatio * years.length\n            let lastEraMinSize = this.lastEraRatio * years.length\n            for (let i = 1; i < years.length; i++) {\n                if (years[i] === years[i-1] || _cnt < eraMinSize || i > years.length - lastEraMinSize) _cnt += 1\n                else {\n                    eras.push({from: years[i-1], to: _to, cnt: _cnt})\n                    _to = years[i]\n                    _cnt = 1\n                }\n            }\n            eras.push({from: years[years.length-1], to: _to, cnt: _cnt})\n        }\n        const branchWithEra = (branch, era) => branch.filter(paper => paper.year >= era.from && paper.year <= era.to)\n\n        // initialize views\n        let numBranches = dataView.branches.length\n        let numClusters = Math.floor(numBranches / 2)\n        const rootColor = chroma.scale()(0.5)\n        const clusterColors = chroma.cubehelix().start(200).rotations(3).gamma(0.7).lightness([0.2, 0.6]).scale().correctLightness().colors(numClusters)\n        const branchColors = dataView.branches.map((_, branchID) => chroma(clusterColors[Math.floor(branchID / 2)]).luminance(branchID % 2 === 0 ? 0.25 : 0.5))\n        let views = {defs: [], nodes: {}, edges: []}\n        const addEdge = (x1, y1, x2, y2, color) => views.edges.push(<line key={views.edges.length} x1={x1} y1={y1} x2={x2} y2={y2} strokeWidth={this.strokeWidth - 1} stroke={color}/>)\n        const addVerticalEdge = (x, y1, y2, color) => addEdge(x, y1, x, y2, color)\n        const addHorizontalEdge = (x1, x2, y, color) => addEdge(x1, y, x2, y, color)\n        const generateGradientColor = (from, to, x1, y1, x2, y2) => {\n            const colorID = randomstring.generate(8)\n            views.defs.push(\n                <defs key={colorID}>\n                    <linearGradient id={colorID} x1={x1} y1={y1} x2={x2} y2={y2} gradientUnits=\"userSpaceOnUse\">\n                    <stop offset=\"20%\"  stopColor={from} />\n                    <stop offset=\"80%\" stopColor={to} />\n                    </linearGradient>\n                </defs>\n            )\n            return `url('#${colorID}')`\n        }\n\n        // Arrange coornidates for each era node\n        views.nodes.root = {\n            x: this.nodeWidth * (dataView.branches.length - 1) / 2 + this.nodeOffsetX,\n            y: this.nodeOffsetY,\n            color: rootColor,\n            pins: [{...dataView.root, \n                textPieces: this.nodeTextFold(dataView.root.text, 2), \n                fullTextPieces: this.nodeTextFold(dataView.root.text, this.nodeFullSpan),\n                abstractPieces: this.nodeTextSecondaryFold(dataView.root.abstract, this.nodeFullSpan),\n                edits: this.state.userEdits[dataView.root.id]\n            }],\n            span: 2,\n            fullSpan: this.nodeFullSpan,\n        }\n        views.nodes.root.lines = this.nodeTextLines(views.nodes.root)\n        views.nodes.root.height = this.nodeHeight(views.nodes.root.lines)\n\n        views.nodes.branches = dataView.branches.map((branch, branchID) => eras.map((era, eraID) => { return {\n            x: this.nodeWidth * branchID + this.nodeOffsetX,\n            y: 0,\n            color: branchColors[branchID],\n            pins: branchWithEra(branch, era),\n            era,\n            eraID,\n            clusterID: Math.floor(branchID / 2),\n            branchID,\n        }}))\n        \n        views.nodes.branches.forEach((branch, branchID) => branch.forEach((node, eraID) => {\n            if (node.pins.length === 0) return\n            node.span = (branchID < numBranches - 1 && views.nodes.branches[branchID+1][eraID].pins.length === 0\n                && !this.disableTextBranchSpan && (!this.disableTextClusterSpan || branchID % 2 === 0)) ? 2 : 1\n            node.fullSpan = (branchID < numBranches - 1) ? this.nodeFullSpan : 1\n            node.pins.forEach(pin => {\n                pin.textPieces = this.nodeTextFold(pin.text, node.span)\n                pin.fullTextPieces = this.nodeTextFold(pin.text, node.fullSpan)\n                pin.abstractPieces = this.nodeTextSecondaryFold(pin.abstract, node.fullSpan)\n            })\n            node.lines = this.nodeTextLines(node)\n            node.height = this.nodeHeight(node.lines)\n        }))\n\n        const horizon = views.nodes.root.height + this.horizonMarginTop\n        let _height = horizon + this.horizonMarginBottom\n        const erasHeight = eras.map((_, eraID) => {\n            views.nodes.branches.forEach(branch => branch[eraID].y = _height + this.nodeOffsetY)\n            const eraHeight = views.nodes.branches.reduce((prev, branch) => Math.max(prev, branch[eraID].height || 0), 0)\n            _height += eraHeight\n            return eraHeight\n        })\n\n        {\n            const node = views.nodes.root, nodeLeft = views.nodes.branches[0][0], nodeRight = views.nodes.branches[numBranches - 2][0]\n            addVerticalEdge(node.x, node.y, horizon, rootColor)\n            addHorizontalEdge(nodeLeft.x, nodeRight.x, horizon, rootColor)\n        }\n        views.nodes.branches.forEach((branch, branchID) => {\n            const _branch = branch.filter(node => node.pins.length > 0)\n            if (_branch.length === 0 && branchID % 2 === 1) return\n            const startEra = (branchID % 2 === 0) ? 0 : _branch[0].eraID\n            let endEra = (_branch.length > 0) ? _branch[_branch.length-1].eraID : 0\n            if (branchID % 2 === 0) {\n                const _nextBranch = views.nodes.branches[branchID+1].filter(node => node.pins.length > 0)\n                if (_nextBranch.length > 0) endEra = Math.max(endEra, _nextBranch[0].eraID)\n            }\n            for (let eraID = startEra + 1; eraID <= endEra; eraID++) {\n                let node = branch[eraID]\n                let sib = branchID > 0 ? views.nodes.branches[branchID-1][eraID] : null\n                const yStart = (!this.disableTextClusterSpan && node.pins.length === 0 && ((branchID > 0 && sib.pins.length > 0) || (eraID === endEra))) ? (node.y - this.nodeRadius - this.nodeTextLineHeight) : node.y\n                node = branch[eraID-1]\n                sib = branchID > 0 ? views.nodes.branches[branchID-1][eraID-1] : null\n                const yEnd = (!this.disableTextClusterSpan && node.pins.length === 0 && branchID > 0 && sib.pins.length > 0) ? (node.y - this.nodeOffsetY + this.nodeHeight(this.nodeTextLines(sib)) - this.nodePaddingBottom + this.nodeTextLineHeight) : node.y\n                addVerticalEdge(node.x, yStart, yEnd, node.color)\n            }\n            if (branchID % 2 === 0) {\n                const node = branch[0]\n                const sib = branchID > 0 ? views.nodes.branches[branchID-1][0] : null\n                const yEnd = (!this.disableTextClusterSpan && node.pins.length === 0 && branchID > 0 && sib.pins.length > 0) ? (node.y - this.nodeRadius - this.nodeTextLineHeight) : node.y\n                addVerticalEdge(node.x, horizon, yEnd, generateGradientColor(rootColor, node.color, node.x, horizon, node.x, yEnd))\n            } else {\n                const node = branch[startEra]\n                const sib = views.nodes.branches[branchID-1][startEra]\n                const yEnd = node.y - this.nodeRadius - this.nodeTextLineHeight\n                const yStart = node.y\n                addVerticalEdge(node.x, yStart, yEnd, node.color)\n                addHorizontalEdge(node.x, sib.x, yEnd, generateGradientColor(node.color, sib.color, node.x, yEnd, sib.x, yEnd))\n            }\n        })\n        \n        const onEdit = (action, source, param) => {\n            const _state = {...this.state}\n            if (!_state.userEdits[source.id] && (action === \"thumb-up\" || action === \"thumb-down\" || action === \"exchange\")) {\n                _state.userEdits[source.id] = {rate: 0, clusterID: source.clusterID}\n            }\n            if (action === \"thumb-up\" && _state.userEdits[source.id].rate <= 0) {\n                _state.userEdits[source.id].rate = 1\n                this.setState(_state)\n            } else if (action === \"thumb-down\" && _state.userEdits[source.id].rate >= 0) {\n                _state.userEdits[source.id].rate = -1\n                this.setState(_state)\n            } else if (action === \"thumb-delete\" && _state.userEdits[source.id] && _state.userEdits[source.id].rate !== 0) {\n                _state.userEdits[source.id].rate = 0\n                this.setState(_state)\n            } else if (action === \"to-exchange\" && _state.toExchange === null) {\n                _state.toExchange = source\n                this.setState(_state)\n            } else if (action === \"exchange\") {\n                _state.userEdits[source.id].clusterID = param\n                _state.toExchange = null\n                this.setState(_state)\n            }\n        }\n\n        const extendedBottomY = views.nodes.branches.map(branch => branch[branch.length-1]).reduce((prev, node) => {\n            let centerY = node.y\n            node.pins.forEach(pin => {\n                prev = Math.max(prev, centerY + (pin.fullTextPieces.length - 1) * this.nodeTextLineHeight * 2 + pin.abstractPieces.length * this.nodeTextSecondaryLineHeight + this.nodeTextLineHeight * 2)\n                centerY += pin.textPieces.length * this.nodeTextLineHeight\n            })\n            return prev\n        }, _height)\n\n        const renderNodes = lodash.flattenDeep(views.nodes.branches).sort((a, b) => (a.eraID === b.eraID) ? (b.branchID - a.branchID) : (b.eraID - a.eraID))\n        renderNodes.push(views.nodes.root)\n\n        const _width = this.nodeWidth * dataView.branches.length\n        const clusterLabelTextPieces = this.clusterNames.map(name => name.split(' '))\n        const clusterLabelTexts = clusterLabelTextPieces.map((pieces, _idx) => \n            <text key={_idx}>\n                {pieces.reverse().map((_text, idx) => <tspan key={idx} x=\"0\" y={-idx * this.labelTextLineHeight}>{_text}</tspan>)}\n            </text>\n        )\n        const clusterLabelsHeight = clusterLabelTextPieces.reduce((prev, pieces) => Math.max(prev, pieces.length), 0) * this.labelTextLineHeight\n        _height += clusterLabelsHeight + this.labelTextLineHeight\n\n        const extendedHeight = Math.max(0, extendedBottomY - _height)\n        const backgroundSolidColors = clusterColors.map(color => chroma(color).luminance(0.9))\n        const backgroundTextSolidColors = clusterColors.map(color => chroma(color).luminance(0.7))\n        const backgroundGradientSolidColors = clusterColors.map((color, idx) => {\n            const x = views.nodes.branches[idx*2][eras.length-1].x\n            return generateGradientColor(chroma(color).luminance(0.9), \"white\", x, _height, x, _height+extendedHeight)\n        })\n        const backgroundSelectionColors = clusterColors.map(color => chroma(color).luminance(0.5))\n        const backgroundTextSelectionColors = clusterColors.map(color => chroma(color).luminance(0.2))\n        const backgroundGradientSelectionColors = clusterColors.map((color, idx) => {\n            const x = views.nodes.branches[idx*2][eras.length-1].x\n            return generateGradientColor(chroma(color).luminance(0.5), \"white\", x, _height, x, _height+extendedHeight)\n        })\n\n        return <svg className=\"mrt\" id={this.props.id} /*width={`${_width}px`} height={`${_height}px`}*/ width=\"100%\" viewBox={`0 0 ${_width} ${_height+extendedHeight}`}>\n            {views.defs}\n            <filter id=\"blur-filter\">\n                <feGaussianBlur stdDeviation={this.nodeTextLineHeight} in=\"SourceGraphic\"/>\n            </filter>\n            {\n                <g className=\"mrt-background\">\n                    <rect x=\"0\" y=\"0\" width={_width} height={horizon} fill={chroma(rootColor).luminance(0.9)}></rect>\n                </g>\n            }\n            {\n                clusterLabelTexts.map((texts, idx) => {\n                    return <g className=\"mrt-background\" key={idx} opacity={this.state.toExchange === null ? 1 : 0}>\n                        <rect x={this.nodeWidth*idx*2} y={horizon} width={this.nodeWidth*2} height={_height-horizon} fill={backgroundSolidColors[idx]}/>\n                        <rect x={this.nodeWidth*idx*2} y={_height} width={this.nodeWidth*2} height={extendedHeight} fill={backgroundGradientSolidColors[idx]}/>\n                        <g transform={`translate(${this.nodeWidth*idx*2+this.nodeOffsetX}, ${_height-this.labelTextLineHeight/2})`} fill={backgroundTextSolidColors[idx]} fontSize={this.labelTextFontSize}>{texts}</g>\n                    </g>\n                })\n            }\n            {\n                eras.map((era, idx) => \n                <g key={idx} className=\"mrt-era-background\" transform={`translate(0, ${views.nodes.branches[0][idx].y - this.nodeRadius - this.nodePaddingTop + erasHeight[idx]})`}>\n                    <rect className=\"mrt-era-background\" x=\"0\" y={-erasHeight[idx]} width={_width} height={erasHeight[idx]} opacity={(idx === this.state.focusEraIndex) ? 0.1 : 0}/>\n                    <text className=\"mrt-era-background\" fontSize={this.labelTextFontSize} x={this.nodePaddingLeft} y={-this.labelTextFontSize/2} opacity={(idx === this.state.focusEraIndex) ? 0.2 : 0}>\n                        {era.from === era.to ? era.from : `${era.from} - ${era.to}`}\n                    </text>\n                </g>)\n            }\n            {\n                views.nodes.branches.map((branch, idx) => {\n                    if (idx % 2 !== 0) return <text key={idx}/>\n                    const _branch = branch.filter(node => node.pins.length > 0)\n                    const _sibBranch = views.nodes.branches[idx+1].filter(node => node.pins.length > 0)\n                    if (_branch.length === 0 && _sibBranch.length === 0) return <text key={idx}/>\n                    const fontSize = this.nodeTextFontSize * 2\n                    const y = ((_branch.length === 0 || (_sibBranch.length > 0 && _sibBranch[0].eraID <= _branch[0].eraID)) ?\n                        (_sibBranch[0].y - this.nodeRadius - this.nodeTextLineHeight) :\n                        (_branch[0].y - this.nodeTextLineHeight)) - fontSize / 2\n                    const x = branch[0].x + this.nodeRadius + this.nodeTextLeadingMargin\n                    const color = chroma(branchColors[idx]).darken(2)\n                    return <text key={idx} x={x} y={y} fill={color} fontSize={fontSize}>{this.clusterNames[Math.floor(idx / 2)]}</text>\n                })\n            }\n            {views.edges}\n            {renderNodes.map((node, idx) => node.pins.length > 0 &&\n                <NodeCircle key={idx} node={node}\n                            radius={this.nodeRadius}\n                            lineHeight={this.nodeTextLineHeight}\n                            color={node.color}\n                            strokeWidth={this.strokeWidth}\n                            onHover={(hover) => \n                                this.setState({...this.state,\n                                    focusNodeIndex: hover ? idx : -1,\n                                    focusEraIndex: hover ? node.eraID : -1\n                                })   \n                            }\n                            expand={idx === this.state.focusNodeIndex}/>\n            )}\n            <g className=\"mrt-node-text-container\">\n            {renderNodes.map((node, idx) => node.pins.length > 0 &&\n                <NodeText key={idx}\n                      pins={node.pins} \n                      x={node.x} y={node.y}\n                      radius={this.nodeRadius}\n                      lineHeight={this.nodeTextLineHeight}\n                      secondaryLineHeight={this.nodeTextSecondaryLineHeight}\n                      textWidth={(node.span - 1) * this.nodeWidth + this.nodeTextWidth}\n                      fullTextWidth={(node.fullSpan - 1) * this.nodeWidth + this.nodeTextWidth}\n                      color={node.color}\n                      fontSize={this.nodeTextFontSize}\n                      secondaryFontSize={this.nodeTextSecondaryFontSize}\n                      strokeWidth={this.strokeWidth}\n                      onEdit={onEdit}\n                      textLeadingMargin={this.nodeTextLeadingMargin}\n                      onHover={(hover) => this.setState({...this.state, focusNodeIndex: hover ? idx : -1})}\n                      editable={typeof(node.clusterID) !== \"undefined\"}\n                      editButtonMarginTop={this.nodeEditButtonMarginTop}\n                      scaleOrigin={(node.clusterID === numClusters - 1) ? \"right\" : ((node.branchID === numBranches - 3) ? \"middle\" : \"left\")}/>)}\n            </g>\n            {\n                clusterLabelTexts.map((texts, idx) => {\n                    const isCurrent = this.state.toExchange !== null && idx === this.state.toExchange.clusterID\n                    return <g className=\"mrt-background\" key={idx} opacity={this.state.toExchange === null ? 0 : 1} visibility={this.state.toExchange === null ? \"hidden\" : \"none\"} onClick={() => onEdit(\"exchange\", this.state.toExchange, idx)}>\n                        <rect className=\"mrt-background-card\" x={this.nodeWidth*idx*2} y={horizon} width={this.nodeWidth*2} height={_height-horizon} fill={backgroundSelectionColors[idx]}/>\n                        <rect className=\"mrt-background-card\" x={this.nodeWidth*idx*2} y={_height} width={this.nodeWidth*2} height={extendedHeight} fill={backgroundGradientSelectionColors[idx]}/>\n                        <g className=\"mrt-background-text\" style={{textDecoration: isCurrent ? \"underline\" : \"\"}} transform={`translate(${this.nodeWidth*idx*2+this.nodeOffsetX}, ${_height-this.labelTextLineHeight/2})`} fill={backgroundTextSelectionColors[idx]} fontSize={this.labelTextFontSize}>{texts}</g>\n                    </g>\n                })\n            }\n        </svg>\n    }\n}","import React from 'react'\nimport MRTViewer from './mrt-viewer'\nimport { Icon } from 'antd'\nimport chroma from 'chroma-js'\nimport './index.css'\nimport svgLib from 'save-svg-as-png'\n\nexport default class MRT extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            userEdits: this.props.userEdits || {},\n            like: this.props.like || false,\n            viewerScale: 100,\n            hideSubBranch: false,\n            disableTextClusterSpan: false,\n        }\n    }\n\n    like() {\n        this.setState({...this.state, like: !this.state.like})\n    }\n\n    capture(full) {\n        if (full)\n            svgLib.saveSvgAsPng(document.getElementById(\"mrt-viewer\"), `master-reading-tree.png`)\n        else {\n            const srcWidth = document.getElementById(\"mrt-viewer\").viewBox.baseVal.width\n            const outputWidth = document.body.clientWidth\n            svgLib.saveSvgAsPng(document.getElementById(\"mrt-viewer\"), `master-reading-tree-snapshot.png`, {scale: outputWidth / srcWidth})\n        }\n    }\n\n    zoom(out) {\n        this.setState({...this.state, viewerScale: Math.min(Math.max(this.state.viewerScale + (out ? -10 : 10), 100), 1000)})\n    }\n\n    render() {\n        return (\n            <div className=\"mrt-container\" style={{width: `${this.state.viewerScale}%`}}>\n                <div className=\"mrt-toolbox\">\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.like()}>\n                        <Icon type=\"heart\" theme={this.state.like ? \"filled\" : \"twoTone\"}\n                            twoToneColor={chroma(\"red\").luminance(0.5).hex()}\n                            style={{color: chroma(\"red\").luminance(0.5).hex()}}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => {}}>\n                        <Icon type=\"share-alt\" theme=\"outlined\" style={{color: chroma(\"green\").luminance(0.3).hex()}}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.capture(true)}>\n                        <Icon type=\"file-image\" theme=\"twoTone\" twoToneColor={chroma(\"orange\").luminance(0.3).hex()}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.capture(false)}>\n                        <Icon type=\"camera\" theme=\"twoTone\" twoToneColor={chroma(\"blue\").luminance(0.3).hex()}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.zoom(true)}>\n                        <Icon type=\"zoom-out\" theme=\"outlined\" style={{color: chroma(\"yellow\").luminance(0.3).hex()}}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.zoom(false)}>\n                        <Icon type=\"zoom-in\" theme=\"outlined\" style={{color: chroma(\"yellow\").luminance(0.3).hex()}}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.setState({...this.state, hideSubBranch: !this.state.hideSubBranch})}>\n                        <Icon type={`eye${this.state.hideSubBranch ? \"\" : \"-invisible\"}`} theme=\"twoTone\" twoToneColor={chroma(\"teal\").luminance(0.3).hex()}/>\n                    </div>\n                    <div className=\"mrt-toolbox-tool-icon\" onClick={() => this.setState({...this.state, disableTextClusterSpan: !this.state.disableTextClusterSpan})}>\n                        <Icon type=\"column-width\" theme=\"outlined\" style={{color: chroma(\"purple\").luminance(0.3).hex()}}/>\n                    </div>\n                </div>\n                <MRTViewer id=\"mrt-viewer\" data={this.props.data} userEdits={this.userEdits} \n                    hideSubBranch={this.state.hideSubBranch} disableTextClusterSpan={this.state.disableTextClusterSpan}/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport sample_data from './sample.json';\nimport MRT from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <MRT data={sample_data}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}